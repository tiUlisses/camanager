version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: app-app
    ports:
      - "5000:5000"
    volumes:
      - ${CAMERAS_OUTPUT_DIR}:/app/output
      - ${UPLOADS_DIR}:/app/uploads
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock
      - .:/app
    networks:
      - app-network
    environment:
      FLASK_ENV: development
    command: bash -c "trap './stop_ffmpeg_containers.sh' EXIT; python app.py"

  frontend:
    build:
      context: ../camera-dashboard
      dockerfile: Dockerfile.node
    image: app-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://app:5000/api
      REACT_APP_STREAM_URL: http://nginx/streams
    volumes:
      - ../camera-dashboard:/app
      - /app/node_modules
    networks:
      - app-network
    command: npm start

  nginx:
    build:
      context: ../app
      dockerfile: Dockerfile.nginx
    image: app-nginx
    ports:
      - "80:80"
    depends_on:
      - app
      - frontend
    networks:
      - app-network
    volumes:
      - ${CAMERAS_OUTPUT_DIR}:/app/output:rw  # Mantendo o caminho consistente
      - ${UPLOADS_DIR}:/app/uploads:ro
      - frontend_build:/mnt/frontend_build:ro
    command: sh -c "nginx -g 'daemon off;'"

  ffmpeg:
    build:
      context: .
      dockerfile: Dockerfile.ffmpeg
    image: ffmpeg
    volumes:
      - ${CAMERAS_OUTPUT_DIR}:/app/output:rw  # Consistente com os outros contÃªineres
    deploy:
      replicas: 0

  mosquitto:
    image: eclipse-mosquitto
    hostname: mosquitto
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - app-network
    volumes:
      - ${MOSQUITTO_PATH}:/etc/mosquitto
      - ${MOSQUITTO_PATH}/mosquitto.conf:/mosquitto/config/mosquitto.conf
    restart: unless-stopped
volumes:
  frontend_build:
    driver: local

networks:
  app-network:
    driver: bridge
